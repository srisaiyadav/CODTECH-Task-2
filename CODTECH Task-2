import numpy as np
import pandas as pd
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
from sklearn.metrics import silhouette_score, davies_bouldin_score
import matplotlib.pyplot as plt
import seaborn as sns


data, labels_true = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=42)


df = pd.DataFrame(data, columns=['Feature1', 'Feature2'])


plt.scatter(df['Feature1'], df['Feature2'], s=30, c='gray')
plt.title("Scatter Plot of Dataset")
plt.xlabel("Feature1")
plt.ylabel("Feature2")
plt.show()


kmeans = KMeans(n_clusters=4, random_state=42)
kmeans_labels = kmeans.fit_predict(data)

hierarchical = AgglomerativeClustering(n_clusters=4)
hierarchical_labels = hierarchical.fit_predict(data)


dbscan = DBSCAN(eps=0.5, min_samples=5)
dbscan_labels = dbscan.fit_predict(data)


print("Silhouette Score (K-means):", silhouette_score(data, kmeans_labels))
print("Silhouette Score (Hierarchical):", silhouette_score(data, hierarchical_labels))

if len(set(dbscan_labels)) > 1:
    print("Silhouette Score (DBSCAN):", silhouette_score(data, dbscan_labels))
else:
    print("Silhouette Score (DBSCAN): Not applicable")


print("Davies-Bouldin Index (K-means):", davies_bouldin_score(data, kmeans_labels))
print("Davies-Bouldin Index (Hierarchical):", davies_bouldin_score(data, hierarchical_labels))
if len(set(dbscan_labels)) > 1:
    print("Davies-Bouldin Index (DBSCAN):", davies_bouldin_score(data, dbscan_labels))
else:
    print("Davies-Bouldin Index (DBSCAN): Not applicable")

fig, axes = plt.subplots(1, 3, figsize=(18, 5))


sns.scatterplot(x=data[:, 0], y=data[:, 1], hue=kmeans_labels, palette='viridis', ax=axes[0])
axes[0].set_title("K-means Clustering")


sns.scatterplot(x=data[:, 0], y=data[:, 1], hue=hierarchical_labels, palette='viridis', ax=axes[1])
axes[1].set_title("Hierarchical Clustering")


sns.scatterplot(x=data[:, 0], y=data[:, 1], hue=dbscan_labels, palette='viridis', ax=axes[2])
axes[2].set_title("DBSCAN Clustering")

plt.show()
